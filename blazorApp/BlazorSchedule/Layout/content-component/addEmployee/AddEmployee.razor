@page "/add-component/{editByName}"
@page "/add-component"
@inject NavigationManager NavigationManager;
@inject AppState appState;
@using System.Collections.Generic;

<div class="relative h-screen">
    @if (errorMessage != null)
    {
        <div class="bg-[#661D15] text-red-500 text-2xl w-[1000px] h-[100px] flex items-center justify-center ml-8 mt-8">
            <p>@errorMessage</p>
        </div>
    }

    <div class="w-[600px]">
        <div class="flex p-8 justify-start items-center">
            <p class="text-xl ml-auto">Name</p>
            <input type="text" id="name" class="ml-4 rounded-lg text-black" @bind="name">
        </div>
        <div class="flex p-8 justify-start items-center">
            <p class="text-xl ml-auto">Type of Agreement</p>
            <select id="type-of-agreement" class="ml-4 rounded-lg text-black" @bind="typeOfAgreement">
                <option value="contract">Employment Contract</option>
                <option value="mandate">Mandate Contract</option>
            </select>
        </div>
        <div class="flex p-8 justify-start items-center">
            <p class="text-xl ml-auto">Minimum Hours</p>
            <input type="text" id="min-hours" class="ml-4 rounded-lg text-black" @bind="minHours">
        </div>
        <div class="flex p-8 justify-start items-center">
            <p class="text-xl ml-auto">Position</p>
            <select id="type-of-agreement" class="ml-4 rounded-lg text-black" @bind="position">
                @foreach (var position in appState.CompanyInstance.positionsList)
                {
                    <option value="@position">@position</option>
                }
            </select>
            <button class="ml-4 text-white w-[10em] h-[2em] bg-[#661D15] border-none shadow-md hover:bg-[#551811] active:scale-95" @onclick="AddPosition">Add Position</button>
        </div>
        <div class="flex justify-center items-center">
            @foreach (var position in positions)
            {
                <div class="flex justify-center items-center">
                    <p>@position</p>
                </div>
            }
        </div>

        <div class="absolute right-12 bottom-12">
            <button class="common-button" @onclick="AddEmployeeMethod">Add Employee</button>
            <button class="common-button" @onclick="GoBack">Cancel</button>
        </div>
    </div>
</div>

@code {
    private string minHours;
    private string typeOfAgreement;
    private string name;
    private int mintHours;
    private string errorMessage;
    private List<Employee> employees = new List<Employee>();
    private List<string> positions;
    private string position;

    [Parameter]
    public string editByName { get; set; }

    protected override void OnInitialized()
    {
        positions = new List<string>();
        position = appState.CompanyInstance.positionsList[0];
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("editByName");
        Console.WriteLine(editByName);
        await base.OnInitializedAsync();
        if (editByName != null)
        {
            name = editByName;
            List<Employee> employees = appState.EmployeesRepository.GetEmployees();
            Employee employee = employees.FirstOrDefault(e => e.name == editByName);
            typeOfAgreement = employee.typeOfAgreement;
            minHours = employee.minHours.ToString();
            positions = employee.positions;
        }
    }

    private void AddEmployeeMethod()
    {
        Console.WriteLine("dsadasdasdas");
        Console.WriteLine(appState.CompanyInstance.name);
        try
        {
            mintHours = int.Parse(minHours);

            if (typeOfAgreement != "contract")
            {
                typeOfAgreement = "mandate";
            }

            if (appState.EmployeesRepository.GetEmployees().Any(e => e.name == name))
            {
                Employee particularEmployee = appState.EmployeesRepository.GetEmployeeByName(name);
                particularEmployee.typeOfAgreement = typeOfAgreement;
                particularEmployee.minHours = mintHours;
                particularEmployee.positions = positions;
                particularEmployee.name = name;
            }
            else
            {
                Employee employee = new Employee(name, typeOfAgreement, mintHours, positions);

                appState.EmployeesRepository.AddEmployee(employee);

                employees = appState.EmployeesRepository.employees;
            }

            errorMessage = null;

            NavigationManager.NavigateTo("/add-employee-menu");
        }
        catch (Exception e)
        {
            errorMessage = $"Invalid data entered! {e.Message}";
        }
    }

    private void AddPosition()
    {
        if (positions.Contains(position))
        {
            errorMessage = "Position already exists";
        }
        else
        {
            positions.Add(position);
            position = string.Empty;
            errorMessage = null;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/add-employee-menu");
    }
}