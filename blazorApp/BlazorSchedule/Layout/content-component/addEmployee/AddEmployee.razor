@page "/add-component"
@inject NavigationManager NavigationManager;
@inject AppState appState;
@using System.Collections.Generic;

<div class="add-employee-container">
    @if (errorMessage != null)
    {
        <div class="error-message">
            <p>@errorMessage</p>
        </div>
    }

    <div class="input-field">
        <div class="particular-information">
            <p class="add-employee-text">Imię</p>
            <input type="text" id="name" class="add-employee-textbox" @bind="name">
        </div>
        <div class="particular-information">
            <p class="add-employee-text">Rodzaj umowy</p>
            <select id="type-of-agreement" class="add-employee-textbox" @bind="typeOfAgreement">
                <option value="Umowa o pracę">Umowa o pracę</option>
                <option value="Umowa zlecenie">Umowa zlecenie</option>
            </select>
        </div>
        <div class="particular-information">
            <p class="add-employee-text">Minimalna liczba godzin</p>
            <input type="text" id="min-hours" class="add-employee-textbox" @bind="minHours">
        </div>
        <div class="particular-information">
            <p class="add-employee-text">Stanowisko</p>
            <select id="type-of-agreement" class="add-employee-textbox" @bind="position">
                @foreach (var position in appState.CompanyInstance.positionsList)
                {
                    <option value="@position">@position</option>
                }
            </select>
            <button class="add-position-button" @onclick="AddPosition">Dodaj stanowisko</button>
        </div>
        <div class="displayPositions">
            @foreach (var position in positions)
            {
                <div class="align-this">
                    <p>@position</p>
                </div>
            }
        </div>



        <div class="add-employee-buttons">
            <button class="add-employee-button" @onclick="AddEmployeeMethod">Dodaj pracownika</button>
            <button class="add-employee-button" @onclick="GoBack">Anuluj</button>
        </div>
    </div>
</div>

@code {
    private string minHours;
    private string typeOfAgreement;
    private string name;
    private int mintHours;
    private string errorMessage;
    private List<Employee> employees = new List<Employee>();
    private List<string> positions;
    private string position;

    protected override void OnInitialized()
    {
        positions = new List<string>();
        position = appState.CompanyInstance.positionsList[0];
    }

    private void AddEmployeeMethod()
    {
        Console.WriteLine("dsadasdasdas");
        Console.WriteLine(appState.CompanyInstance.name);
        try
        {
            mintHours = int.Parse(minHours);

            if (typeOfAgreement != "Umowa zlecenie")
            {
                typeOfAgreement = "Umowa o pracę";
            }

            if (appState.EmployeesRepository.GetEmployees().Any(e => e.name == name))
            {
                throw new Exception("Pracownik o takim imieniu już istnieje!");
            }

            Employee employee = new Employee(name, typeOfAgreement, mintHours, positions);

            appState.EmployeesRepository.AddEmployee(employee);

            employees = appState.EmployeesRepository.employees;

            errorMessage = null;

            NavigationManager.NavigateTo("/add-employee-menu");
        }
        catch (Exception e)
        {
            errorMessage = $"Wprowadzono niepoprawne dane! {e.Message}";
        }
    }

    private void AddPosition()
    {
        if (positions.Contains(position))
        {
            errorMessage = "Stanowisko już istnieje";
        }
        else
        {
            positions.Add(position);
            position = string.Empty;
            errorMessage = null;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/add-employee-menu");
    }
}