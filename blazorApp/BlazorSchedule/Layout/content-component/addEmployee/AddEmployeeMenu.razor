@page "/add-employee-menu"
@using BlazorBootstrap
@inject NavigationManager NavigationManager
@inject AppState appState;

<div class="flex flex-col">
    @if (isPersonInfoVisible)
    {
        <div class="h-screen w-[350px] bg-[#551811] flex flex-col fixed pt-4">
            <p class="px-4">Name: @actualEmployee.name</p>
            <p class="px-4">Type of Agreement: @actualEmployee.typeOfAgreement</p>
            <p class="px-4">Minimum Hours: @actualEmployee.minHours</p>
            <p class="px-4">
                Positions: 
                @foreach (var position in actualEmployee.positions)
                {
                    <p>@position</p>
                }
            </p>
            <div class="flex flex-row justify-around mt-4">
                <button class="bg-[#661D15] text-white border-none px-4 py-2 rounded-lg text-base cursor-pointer" @onclick="EditPerson">Edit</button>
                <button class="bg-[#661D15] text-white border-none px-4 py-2 rounded-lg text-base cursor-pointer" @onclick="DeletePerson">Delete</button>
            </div>
        </div>
    }

    <div class="grid grid-cols-[repeat(auto-fill,minmax(300px,1fr))] gap-10 @(isPersonInfoVisible ? "pl-[350px]" : "")">
        <div class="w-[300px] h-[200px] bg-[#661D15] mt-6 ml-6 rounded-2xl shadow-md flex flex-row justify-center items-center transition-transform duration-300 ease-in-out hover:bg-[#551811] hover:scale-110" @onclick="ChangeToAddEmployee">
            <div class="text-4xl pr-2">
                <Icon Name="IconName.PersonPlus" />
            </div>
            <div>
                <h2>Add <br> Employee</h2>
            </div>
        </div>
        @foreach (var employee in employeeList)
        {
            <div class="w-[300px] h-[200px] bg-[#661D15] mt-6 ml-6 rounded-2xl shadow-md flex flex-row justify-center items-center transition-transform duration-300 ease-in-out hover:bg-[#551811] hover:scale-110" @onclick="() => TogglePersonInfoContainer(employee.name)">
                <p class="text-4xl">@employee.name</p>
            </div>
        }
    </div>
</div>

@code {
    private List<Employee> employeeList = new List<Employee>();
    private bool isPersonInfoVisible = false;
    private Employee actualEmployee;
    private EmployeesRepository employeesRepository;
    
    [Parameter]
    public string editByName { get; set; }

    private IDictionary<string, object> BlockRight => new Dictionary<string, object>
{
{ "class", isPersonInfoVisible ? "block-field active" : "block-field" }
};

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        employeesRepository = appState.EmployeesRepository;
        employeeList = employeesRepository.GetEmployees();
    }

    private void TogglePersonInfoContainer(string name)
    {
        isPersonInfoVisible = !isPersonInfoVisible;
        actualEmployee = employeesRepository.GetEmployeeByName(name);
    }

    private void ChangeToAddEmployee()
    {
        NavigationManager.NavigateTo("/add-component");
    }

    private void EditPerson()
    {
        editByName = actualEmployee.name;
        NavigationManager.NavigateTo($"/add-component/{editByName}");
    }

    private void DeletePerson()
    {
        employeesRepository.DeleteEmployee(actualEmployee.name);
        employeeList = employeesRepository.GetEmployees();
        isPersonInfoVisible = false;
    }
}

<style>
.block-field{
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 40px;
}
</style>