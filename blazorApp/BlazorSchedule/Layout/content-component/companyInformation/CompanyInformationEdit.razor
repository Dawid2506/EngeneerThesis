@page "/company-information-edit";
@inject NavigationManager NavigationManager;
@using System.Text.Json;
@using System.Web;
@using YourBlazorProject.Models;
@inject AppState appState;

<div class="add-employee-container">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">
            <p>@errorMessage</p>
        </div>
    }

    <div class="input-field">
        <div class="particular-information">
            <p class="add-employee-text">Company Name</p>
            <input type="text" class="add-employee-textbox" @bind="name">
        </div>
        <div class="particular-information">
            <p class="add-employee-text">Working Days</p>
            <div class="working-days-container">
                @foreach (DaysOfWeek day in Enum.GetValues(typeof(DaysOfWeek)))
                {
                    <div class="particular-day @(workingDaysList.Contains(day.ToString()) ? "working-day" : "")"
                        @onclick='() => AddDay(day.ToString())'>@day</div>
                }
            </div>
        </div>
        <div class="particular-information">
            <p class="add-employee-text">Position</p>
            <input type="text" id="position" class="add-employee-textbox" @bind="position">
            <button class="add-position-button" @onclick="AddPosition">Add Position</button>
        </div>
        <div class="displayPositions">
            @foreach (string position in positions)
            {
                <div class="align-this" style="margin-left: 5em;">
                    <p>@position</p>
                </div>
            }
        </div>

        <div class="company-info-buttons">
            <button class="company-info-button" @onclick="NextPage">Proceed</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? name { get; set; }
    [Parameter]
    public string? shift { get; set; }

    [Parameter]
    public List<string> workingDaysList { get; set; } = new List<string>();

    [Parameter]
    public List<string> positions { get; set; } = new List<string>();
    private string? position;
    private int mintHours;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        shift = "first";

        if (appState.CompanyInstance.name != null)
        {
            name = appState.CompanyInstance.name;
            workingDaysList = appState.CompanyInstance.workingDays;
            positions = appState.CompanyInstance.positionsList;
        }
    }

    private void AddDay(string day)
    {
        if (string.IsNullOrEmpty(day))
        {
            return;
        }

        if (workingDaysList.Contains(day))
        {
            workingDaysList.Remove(day);
        }
        else
        {
            workingDaysList.Add(day);
        }
    }

    private void AddPosition()
    {
        if (string.IsNullOrEmpty(position))
        {
            errorMessage = "Position cannot be empty";
            return;
        }

        if (positions.Contains(position))
        {
            errorMessage = "Position already exists";
            return;
        }

        positions.Add(position);
        position = string.Empty;
    }

    private void NextPage()
    {
        if (!AreParametersNotEmpty() || name == null)
        {
            errorMessage = "Fill in all fields";
            return;
        }

        string encodedPositions = Uri.EscapeDataString(JsonSerializer.Serialize(positions));
        string encodedWorkingDaysList = Uri.EscapeDataString(JsonSerializer.Serialize(workingDaysList));
        string encodedName = Uri.EscapeDataString(name);
        NavigationManager.NavigateTo($"/company-information-edit-next/{encodedPositions}/{encodedWorkingDaysList}/{encodedName}/{shift}");
    }

    private bool AreParametersNotEmpty()
    {
        return !string.IsNullOrEmpty(name) && workingDaysList.Count > 0 && positions.Count > 0;
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/add-employee-menu");
    }
}