@page "/company-information-edit";
@inject NavigationManager NavigationManager;
@using System.Text.Json;
@using System.Web;
@inject AppState appState;

<div class="add-employee-container">
    @if (errorMessage != null)
    {
        <div class="error-message">
            <p>@errorMessage</p>
        </div>
    }

    <div class="input-field">
        <div class="particular-information">
            <p class="add-employee-text">Nazwa firmy</p>
            <input type="text" class="add-employee-textbox" @bind="name">
        </div>
        <div class="particular-information">
            <p class="add-employee-text">Dni pracujące</p>
            <div class="working-days-container">
                <div class="particular-day @(workingDaysList.Contains("poniedziałek") ? "working-day" : "")"
                    @onclick='() => AddDay("poniedziałek")'>Poniedziałek</div>
                <div class="particular-day @(workingDaysList.Contains("wtorek") ? "working-day" : "")"
                    @onclick='() => AddDay("wtorek")'>Wtorek</div>
                <div class="particular-day @(workingDaysList.Contains("środa") ? "working-day" : "")"
                    @onclick='() => AddDay("środa")'>Środa</div>
                <div class="particular-day @(workingDaysList.Contains("czwartek") ? "working-day" : "")"
                    @onclick='() => AddDay("czwartek")'>Czwartek</div>
                <div class="particular-day @(workingDaysList.Contains("piątek") ? "working-day" : "")"
                    @onclick='() => AddDay("piątek")'>Piątek</div>
                <div class="particular-day @(workingDaysList.Contains("sobota") ? "working-day" : "")"
                    @onclick='() => AddDay("sobota")'>Sobota</div>
                <div class="particular-day @(workingDaysList.Contains("niedziela") ? "working-day" : "")"
                    @onclick='() => AddDay("niedziela")'>Niedziela</div>
            </div>
        </div>
        <div class="particular-information">
            <p class="add-employee-text">Stanowisko</p>
            <input type="text" id="position" class="add-employee-textbox" @bind="position">
            <button class="add-position-button" @onclick="AddPosition">Dodaj stanowisko</button>
        </div>
        <div class="displayPositions">
            @foreach (var position in positions)
            {
                <div class="align-this" style="margin-left: 5em;">
                    <p>@position</p>
                </div>
            }
        </div>

        <div class="company-info-buttons">
            <button class="company-info-button" @onclick="NextPage">Przejdź dalej </button>
        </div>
    </div>

    @code {
        [Parameter]
        public string name { get; set; }

        [Parameter]
        public List<string> workingDaysList { get; set; } = new List<string>();

        [Parameter]
        public List<string> positions { get; set; } = new List<string>();
        private string position;
        private int mintHours;
        private string errorMessage;

        protected override void OnInitialized()
        {
            if (appState.CompanyInstance.name != null)
            {
                name = appState.CompanyInstance.name;
                workingDaysList = appState.CompanyInstance.workingDays;
                positions = appState.CompanyInstance.positionsList;
            }
        }

        private void AddDay(string day)
        {
            if (workingDaysList.Contains(day))
            {
                workingDaysList.Remove(day);
            }
            else
            {
                workingDaysList.Add(day);
            }
        }

        private void AddPosition()
        {
            if (positions.Contains(position))
            {
                errorMessage = "Stanowisko już istnieje";
            }
            else
            {
                positions.Add(position);
                position = string.Empty;
                Console.WriteLine(positions[0]);
            }
        }



        private void NextPage()
        {
            if (AreParametersNotEmpty())
            {
                // Przekazanie danych poprzez adres URL
                var encodedPositions = Uri.EscapeDataString(JsonSerializer.Serialize(positions));
                var encodedWorkingDaysList = Uri.EscapeDataString(JsonSerializer.Serialize(workingDaysList));
                var encodedName = Uri.EscapeDataString(name);
                NavigationManager.NavigateTo($"/company-information-edit-next/{encodedPositions}/{encodedWorkingDaysList}/{encodedName}");
            }
            else
            {
                errorMessage = "Wypełnij wszystkie pola";
            }
        }

        private bool AreParametersNotEmpty()
        {
            return !string.IsNullOrEmpty(name) && workingDaysList.Count > 0 && positions.Count > 0;
        }



        private void GoBack()
        {
            NavigationManager.NavigateTo("/add-employee-menu");
        }
    }