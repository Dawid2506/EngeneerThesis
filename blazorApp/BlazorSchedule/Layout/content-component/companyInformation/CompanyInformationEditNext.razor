@page "/company-information-edit-next/{encodedPositions}/{encodedWorkingDaysList}/{name}"
@inject NavigationManager NavigationManager
@using BlazorBootstrap
@using System.Text.Json
@using System.Collections.Generic
@using YourBlazorProject.Models
@inject AppState appState

<div>
    <div class="w-[600px]">
        <div class="flex p-8 justify-start items-center">
            <p class="text-xl ml-auto pt-2">Working Hours</p>
            <input type="time" class="ml-4 bg-[#661D15] border border-black shadow-md text-white" @bind="startHourForAll" />
            <input type="time" class="ml-4 bg-[#661D15] border border-black shadow-md text-white" @bind="endHourForAll" />
            <div class="flex flex-col ml-4 justify-start items-center">
                <p>For all days</p>
                <div class="w-5 h-5 bg-[#661D15] border border-black flex items-center justify-center text-lg" @onclick="ToggleCheckbox">
                    @if (isCheckboxChecked)
                    {
                        <Icon Name="IconName.Check" />
                    }
                </div>
            </div>
        </div>
        @if (!isCheckboxChecked)
        {
            <div class="flex items-center w-auto overflow-x-auto pr-4">
                @for (int i = 0; i < workingDaysList.Count; i++)
                {
                    int index = i;
                    <div class="w-[230px] h-[100px] bg-[#661D15] ml-4 text-center rounded-lg shadow-md mb-4 pr-4">
                        <p class="text-xl ml-auto pt-2">@workingDaysList[i]</p>
                        <div class="flex">
                            <input type="time" class="ml-4 bg-[#661D15] border border-black shadow-md text-white" @bind="startHours[index]"
                                @oninput="@(e => UpdateWorkingHours(workingDaysList[index], startHours[index], endHours[index], true))" />
                            <input type="time" class="ml-4 bg-[#661D15] border border-black shadow-md text-white" @bind="endHours[index]"
                                @oninput="@(e => UpdateWorkingHours(workingDaysList[index], startHours[index], endHours[index], false))" />
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <div class="">
        <div class="flex p-8 justify-start items-center">
            <p class="text-xl ml-auto pt-2">Adjust positions for each day</p>
        </div>
        <div class="flex items-center w-auto overflow-x-auto pr-4">
            @for (int i = 0; i < workingDaysList.Count; i++)
            {
                int iIndex = i;
                <div class="min-w-[200px] bg-[#661D15] ml-4 text-center p-4 rounded-lg shadow-md mb-4">
                    <p class="text-xl ml-auto pt-2">@workingDaysList[i]</p>
                    <p class="text-xs">Add position</p>
                    <div class="flex justify-center items-center">
                        <select class="ml-4 bg-[#661D15] border border-black shadow-md text-white" @bind="position">
                            @for (int j = 0; j < positions.Count; j++)
                            {
                                <option value="@positions[j]">@positions[j]</option>
                            }
                        </select>
                        <div class="w-8 h-8 bg-[#661D15] ml-1 flex justify-center items-center text-white text-base rounded border border-black shadow-md cursor-pointer pt-1" @onclick='() => AddPosition(iIndex)'>
                            <Icon Name="IconName.FilePlus" />
                        </div>
                    </div>
                    <div>
                        @if (positionsPerDay.ContainsKey(workingDaysList[i]))
                        {
                            @foreach (var position in positionsPerDay[workingDaysList[i]])
                            {
                                <div class="flex justify-center items-center">
                                    <p>@position</p>
                                    <div class="w-8 h-8 bg-[#661D15] ml-1 flex justify-center items-center text-white text-base rounded border border-black shadow-md cursor-pointer pt-1" @onclick='() => RemovePosition(iIndex)'>
                                        <Icon Name="IconName.FileMinus" />
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="flex justify-end pr-12 pb-12 w-full">
        @* @if (shift == ShiftType.First)
        {
            <button class="text-white w-[10em] h-[4em] bg-[#661D15] border-none shadow-md hover:bg-[#551811] active:scale-95" @onclick="AddShift">Add second shift</button>
        } *@
        <button class="common-button" @onclick="SaveData">Save</button>
    </div>
</div>