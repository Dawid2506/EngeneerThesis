@page "/company-information-edit-next/{encodedPositions}/{encodedWorkingDaysList}/{name}/{shift}"
@inject NavigationManager NavigationManager
@using BlazorBootstrap
@using System.Text.Json
@using System.Collections.Generic
@inject AppState appState

<div>
    <div class="input-field">
        <div class="particular-information">
            <p class="add-employee-text">Working Hours</p>
            <input type="time" class="choose-hour" @bind="startHourForAll" />
            <input type="time" class="choose-hour" @bind="endHourForAll" />
            <div class="every-day">
                <p>For all days</p>
                <div class="checkbox" @onclick="ToggleCheckbox">
                    @if (isCheckboxChecked)
                    {
                        <Icon Name="IconName.Check" />
                    }
                </div>
            </div>
        </div>
        @if (!isCheckboxChecked)
        {
            <div class="adjust-hours-per-day">
                @for (int i = 0; i < workingDaysList.Count; i++)
                {
                    int index = i;
                    <div class="adjust-particular-day-hour">
                        <p class="add-employee-text">@workingDaysList[i]</p>
                        <div style="display: flex;">
                            <input type="time" class="choose-hour" @bind="startHours[index]"
                                @oninput="@(e => UpdateWorkingHours(workingDaysList[index], startHours[index], endHours[index], true))" />
                            <input type="time" class="choose-hour" @bind="endHours[index]"
                                @oninput="@(e => UpdateWorkingHours(workingDaysList[index], startHours[index], endHours[index], false))" />
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <div class="input-field">
        <div class="particular-information">
            <p class="add-employee-text">Adjust positions for each day</p>
        </div>
        <div class="adjust-hours-per-day">
            @for (int i = 0; i < workingDaysList.Count; i++)
            {
                int iIndex = i;
                <div class="adjust-particular-day-position">
                    <p class="add-employee-text">@workingDaysList[i]</p>
                    <p class="add-position-text">Add position</p>
                    <div class="align-this">
                        <select class="choose-hour" @bind="position">
                            @for (int j = 0; j < positions.Count; j++)
                            {
                                <option value="@positions[j]">@positions[j]</option>
                            }
                        </select>
                        <div class="add-position-button" @onclick='() => AddPosition(iIndex)'>
                            <Icon Name="IconName.FilePlus" />
                        </div>
                    </div>
                    <div class="displayPositions">
                        @if (positionsPerDay.ContainsKey(workingDaysList[i]))
                        {
                            @foreach (var position in positionsPerDay[workingDaysList[i]])
                            {
                                <div class="align-this">
                                    <p>@position</p>
                                    <div class="add-position-button" @onclick='() => RemovePosition(iIndex)'>
                                        <Icon Name="IconName.FileMinus" />
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="save-company-info-buttons">
        @if (shift == ShiftType.First)
        {
            <button class="save-company-info-button" @onclick="AddShift">Add second shift</button>
        }
        <button class="save-company-info-button" style="margin-left: 1em;" @onclick="SaveData">Save</button>
    </div>
</div>

@code {
    [Parameter]
    public string? name { get; set; }
    [Parameter]
    public ShiftType shift { get; set; } = ShiftType.First;
    public List<string> positions { get; set; } = new List<string>();
    public List<string> workingDaysList { get; set; } = new List<string>();

    [Parameter]
    public string? encodedPositions { get; set; }

    [Parameter]
    public string? encodedWorkingDaysList { get; set; }

    private bool isCheckboxChecked = true;
    private List<DateTime> startHours { get; set; } = new List<DateTime>();
    private List<DateTime> endHours { get; set; } = new List<DateTime>();
    private Dictionary<DateTime, DateTime> workingHours { get; set; } = new Dictionary<DateTime, DateTime>();
    private Dictionary<string, List<string>> positionsPerDay { get; set; } = new Dictionary<string, List<string>>();
    private string? position { get; set; }
    public DateTime startHourForAll { get; set; }
    public DateTime endHourForAll { get; set; }
    public Company? companyInstance;

    public enum ShiftType
    {
        First,
        Second
    }

    protected override void OnInitialized()
    {
        if (shift == ShiftType.First)
        {
            companyInstance = appState.CompanyInstance;
        }
        else if (shift == ShiftType.Second)
        {
            companyInstance = appState.CompanySecondShift;
        }

        positions = JsonSerializer.Deserialize<List<string>>(encodedPositions ?? "[]") ?? new List<string>();
        workingDaysList = JsonSerializer.Deserialize<List<string>>(encodedWorkingDaysList ?? "[]") ?? new List<string>();
        position = positions.FirstOrDefault();

        positionsPerDay = new Dictionary<string, List<string>>();

        for (int i = 0; i < workingDaysList.Count; i++)
        {
            startHours.Add(DateTime.MinValue);
            endHours.Add(DateTime.MinValue);
            positionsPerDay.Add(workingDaysList[i], new List<string>());
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (companyInstance?.workingHoursDay == null) return;

        positionsPerDay = companyInstance.positionsPerDay;

        if (companyInstance.isCheckboxChecked)
        {
            startHourForAll = DateTime.Parse(companyInstance.workingHoursDay.Values.First().Keys.First());
            endHourForAll = DateTime.Parse(companyInstance.workingHoursDay.Values.First().Values.First());
        }
        else
        {
            foreach (var day in companyInstance.workingHoursDay)
            {
                var index = workingDaysList.IndexOf(day.Key);

                startHours[index] = DateTime.Parse(day.Value.Keys.First());
                endHours[index] = DateTime.Parse(day.Value.Values.First());
            }
        }
    }

    private void ToggleCheckbox()
    {
        isCheckboxChecked = !isCheckboxChecked;
    }

    private void UpdateWorkingHours(string day, DateTime startHour, DateTime endHour, bool isStartTime)
    {
        if (isStartTime)
        {
            startHours[workingDaysList.IndexOf(day)] = startHour;
        }
        else
        {
            endHours[workingDaysList.IndexOf(day)] = endHour;
        }
    }

    private void AddPosition(int iIndex)
    {
        if (position == null) return;

        positionsPerDay[workingDaysList[iIndex]].Add(position);
    }

    private void RemovePosition(int iIndex)
    {
        if (position == null) return;
        positionsPerDay[workingDaysList[iIndex]].Remove(position);
    }

    private void AddShift()
    {
        SaveData();

        string encodedPositions = Uri.EscapeDataString(JsonSerializer.Serialize(positions ?? new List<string>()));
        string encodedWorkingDaysList = Uri.EscapeDataString(JsonSerializer.Serialize(workingDaysList ?? new List<string>()));
        string encodedName = Uri.EscapeDataString(name ?? string.Empty);
        shift = ShiftType.Second;
        NavigationManager.NavigateTo($"/company-information-edit-next/{encodedPositions}/{encodedWorkingDaysList}/{encodedName}/{shift}");
    }

    private void SaveData()
    {
        // Save the working hours per day
        Dictionary<string, Dictionary<string, string>> myWorkingHoursDay = new Dictionary<string, Dictionary<string, string>>();

        if (isCheckboxChecked)
        {
            string startHour = startHourForAll.TimeOfDay.ToString();
            string endHour = endHourForAll.TimeOfDay.ToString();

            foreach (var day in workingDaysList)
            {
                Dictionary<string, string> myWorkingHours = new Dictionary<string, string>();
                myWorkingHours.Add(startHour, endHour);
                myWorkingHoursDay.Add(day, myWorkingHours);
            }
        }
        else
        {
            for (int i = 0; i < workingDaysList.Count; i++)
            {
                string startHour = startHours[i].TimeOfDay.ToString();
                string endHour = endHours[i].TimeOfDay.ToString();

                Dictionary<string, string> myWorkingHours = new Dictionary<string, string>();
                myWorkingHours.Add(startHour, endHour);
                myWorkingHoursDay.Add(workingDaysList[i], myWorkingHours);
            }
        }

        if(companyInstance == null || name == null) return;

        companyInstance.workingDays = workingDaysList;
        companyInstance.workingHoursDay = myWorkingHoursDay;
        companyInstance.positionsPerDay = positionsPerDay;
        companyInstance.name = name;
        companyInstance.positionsList = positions;
        companyInstance.isCheckboxChecked = isCheckboxChecked;

        if (shift == ShiftType.First)
        {
            appState.CompanyInstance = companyInstance;
        }
        else if (shift == ShiftType.Second)
        {
            appState.CompanySecondShift = companyInstance;
        }

        NavigationManager.NavigateTo("/company-information");
    }
}