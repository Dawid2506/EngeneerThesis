@page "/company-information-edit-next/{encodedPositions}/{encodedWorkingDaysList}/{name}"
@inject NavigationManager NavigationManager
@using BlazorBootstrap
@using System.Text.Json
@using System.Collections.Generic
@using YourBlazorProject.Models
@inject AppState appState

<div>
    <div class="w-[600px]">
        <div class="flex p-8 justify-start items-center">
            <p class="text-xl ml-auto pt-2">Working Hours</p>
            <input type="time" class="ml-4 bg-[#661D15] border border-black shadow-md text-white" @bind="startHourForAll" />
            <input type="time" class="ml-4 bg-[#661D15] border border-black shadow-md text-white" @bind="endHourForAll" />
            <div class="flex flex-col ml-4 justify-start items-center">
                <p>For all days</p>
                <div class="w-5 h-5 bg-[#661D15] border border-black flex items-center justify-center text-lg" @onclick="ToggleCheckbox">
                    @if (isCheckboxChecked)
                    {
                        <Icon Name="IconName.Check" />
                    }
                </div>
            </div>
        </div>
        @if (!isCheckboxChecked)
        {
            <div class="flex items-center w-auto overflow-x-auto pr-4">
                @for (int i = 0; i < workingDaysList.Count; i++)
                {
                    int index = i;
                    <div class="w-[230px] h-[100px] bg-[#661D15] ml-4 text-center rounded-lg shadow-md mb-4 pr-4">
                        <p class="text-xl ml-auto pt-2">@workingDaysList[i]</p>
                        <div class="flex">
                            <input type="time" class="ml-4 bg-[#661D15] border border-black shadow-md text-white" @bind="startHours[index]"
                                @oninput="@(e => UpdateWorkingHours(workingDaysList[index], startHours[index], endHours[index], true))" />
                            <input type="time" class="ml-4 bg-[#661D15] border border-black shadow-md text-white" @bind="endHours[index]"
                                @oninput="@(e => UpdateWorkingHours(workingDaysList[index], startHours[index], endHours[index], false))" />
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <div class="">
        <div class="flex p-8 justify-start items-center">
            <p class="text-xl ml-auto pt-2">Adjust positions for each day</p>
        </div>
        <div class="flex items-center w-auto overflow-x-auto pr-4">
            @for (int i = 0; i < workingDaysList.Count; i++)
            {
                int iIndex = i;
                <div class="min-w-[200px] bg-[#661D15] ml-4 text-center p-4 rounded-lg shadow-md mb-4">
                    <p class="text-xl ml-auto pt-2">@workingDaysList[i]</p>
                    <p class="text-xs">Add position</p>
                    <div class="flex justify-center items-center">
                        <select class="ml-4 bg-[#661D15] border border-black shadow-md text-white" @bind="position">
                            @for (int j = 0; j < positions.Count; j++)
                            {
                                <option value="@positions[j]">@positions[j]</option>
                            }
                        </select>
                        <div class="w-8 h-8 bg-[#661D15] ml-1 flex justify-center items-center text-white text-base rounded border border-black shadow-md cursor-pointer pt-1" @onclick='() => AddPosition(iIndex)'>
                            <Icon Name="IconName.FilePlus" />
                        </div>
                    </div>
                    <div>
                        @if (positionsPerDay.ContainsKey(workingDaysList[i]))
                        {
                            @foreach (var position in positionsPerDay[workingDaysList[i]])
                            {
                                <div class="flex justify-center items-center">
                                    <p>@position</p>
                                    <div class="w-8 h-8 bg-[#661D15] ml-1 flex justify-center items-center text-white text-base rounded border border-black shadow-md cursor-pointer pt-1" @onclick='() => RemovePosition(iIndex)'>
                                        <Icon Name="IconName.FileMinus" />
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="flex justify-end pr-12 pb-12 w-full">
        @* @if (shift == ShiftType.First)
        {
            <button class="text-white w-[10em] h-[4em] bg-[#661D15] border-none shadow-md hover:bg-[#551811] active:scale-95" @onclick="AddShift">Add second shift</button>
        } *@
        <button class="text-white w-[10em] h-[4em] bg-[#661D15] border-none shadow-md hover:bg-[#551811] active:scale-95 ml-4" @onclick="SaveData">Save</button>
    </div>
</div>

@code {
    [Parameter]
    public string? name { get; set; }
    [Parameter]
    public ShiftType shift { get; set; }
    public List<string> positions { get; set; } = new List<string>();
    public List<string> workingDaysList { get; set; } = new List<string>();

    [Parameter]
    public string? encodedPositions { get; set; }

    [Parameter]
    public string? encodedWorkingDaysList { get; set; }

    private bool isCheckboxChecked = true;
    private List<DateTime> startHours { get; set; } = new List<DateTime>();
    private List<DateTime> endHours { get; set; } = new List<DateTime>();
    private Dictionary<DateTime, DateTime> workingHours { get; set; } = new Dictionary<DateTime, DateTime>();
    private Dictionary<string, List<string>> positionsPerDay { get; set; } = new Dictionary<string, List<string>>();
    private string? position { get; set; }
    public DateTime startHourForAll { get; set; }
    public DateTime endHourForAll { get; set; }
    public Company? companyInstance;

    protected override void OnInitialized()
    {
        if (shift == ShiftType.First)
        {
            companyInstance = appState.CompanyInstance;
        }
        else if (shift == ShiftType.Second)
        {
            companyInstance = appState.CompanySecondShift;
        }

        positions = JsonSerializer.Deserialize<List<string>>(encodedPositions ?? "[]") ?? new List<string>();
        workingDaysList = JsonSerializer.Deserialize<List<string>>(encodedWorkingDaysList ?? "[]") ?? new List<string>();
        position = positions.FirstOrDefault();

        positionsPerDay = new Dictionary<string, List<string>>();

        for (int i = 0; i < workingDaysList.Count; i++)
        {
            startHours.Add(DateTime.MinValue);
            endHours.Add(DateTime.MinValue);
            positionsPerDay.Add(workingDaysList[i], new List<string>());
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (companyInstance?.workingHoursDay == null) return;

        positionsPerDay = companyInstance.positionsPerDay;

        if (companyInstance.isCheckboxChecked)
        {
            startHourForAll = DateTime.Parse(companyInstance.workingHoursDay.Values.First().Keys.First());
            endHourForAll = DateTime.Parse(companyInstance.workingHoursDay.Values.First().Values.First());
        }
        else
        {
            foreach (var day in companyInstance.workingHoursDay)
            {
                var index = workingDaysList.IndexOf(day.Key);

                startHours[index] = DateTime.Parse(day.Value.Keys.First());
                endHours[index] = DateTime.Parse(day.Value.Values.First());
            }
        }
    }

    private void ToggleCheckbox()
    {
        isCheckboxChecked = !isCheckboxChecked;
    }

    private void UpdateWorkingHours(string day, DateTime startHour, DateTime endHour, bool isStartTime)
    {
        if (isStartTime)
        {
            startHours[workingDaysList.IndexOf(day)] = startHour;
        }
        else
        {
            endHours[workingDaysList.IndexOf(day)] = endHour;
        }
    }

    private void AddPosition(int iIndex)
    {
        if (position == null) return;

        positionsPerDay[workingDaysList[iIndex]].Add(position);
    }

    private void RemovePosition(int iIndex)
    {
        if (position == null) return;
        positionsPerDay[workingDaysList[iIndex]].Remove(position);
    }

    private void AddShift()
    {
        SaveData();

        string encodedPositions = Uri.EscapeDataString(JsonSerializer.Serialize(positions ?? new List<string>()));
        string encodedWorkingDaysList = Uri.EscapeDataString(JsonSerializer.Serialize(workingDaysList ?? new List<string>()));
        string encodedName = Uri.EscapeDataString(name ?? string.Empty);
        shift = ShiftType.Second;
        NavigationManager.NavigateTo($"/company-information-edit-next/{encodedPositions}/{encodedWorkingDaysList}/{encodedName}/{shift}");
    }

    private void SaveData()
    {
        // Save the working hours per day
        Dictionary<string, Dictionary<string, string>> myWorkingHoursDay = new Dictionary<string, Dictionary<string, string>>();

        if (isCheckboxChecked)
        {
            string startHour = startHourForAll.TimeOfDay.ToString();
            string endHour = endHourForAll.TimeOfDay.ToString();

            foreach (var day in workingDaysList)
            {
                Dictionary<string, string> myWorkingHours = new Dictionary<string, string>();
                myWorkingHours.Add(startHour, endHour);
                myWorkingHoursDay.Add(day, myWorkingHours);
            }
        }
        else
        {
            for (int i = 0; i < workingDaysList.Count; i++)
            {
                string startHour = startHours[i].TimeOfDay.ToString();
                string endHour = endHours[i].TimeOfDay.ToString();

                Dictionary<string, string> myWorkingHours = new Dictionary<string, string>();
                myWorkingHours.Add(startHour, endHour);
                myWorkingHoursDay.Add(workingDaysList[i], myWorkingHours);
            }
        }

        if(companyInstance == null || name == null) return;

        companyInstance.workingDays = workingDaysList;
        companyInstance.workingHoursDay = myWorkingHoursDay;
        companyInstance.positionsPerDay = positionsPerDay;
        companyInstance.name = name;
        companyInstance.positionsList = positions;
        companyInstance.isCheckboxChecked = isCheckboxChecked;

        if (shift == ShiftType.First)
        {
            appState.CompanyInstance = companyInstance;
        }
        else if (shift == ShiftType.Second)
        {
            appState.CompanySecondShift = companyInstance;
        }

        NavigationManager.NavigateTo("/company-information");
    }
}