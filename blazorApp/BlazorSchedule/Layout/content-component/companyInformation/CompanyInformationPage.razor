@page "/company-information";
@using BlazorBootstrap
@using YourBlazorProject.Models
@inject NavigationManager NavigationManager;
@inject AppState appState;

<div>
    <div class="company-info-container">
        @if (!IsNotNullCompanyInfo())
        {
            <p class="company-info-text" style="font-size: 24px;">Brak informacji o firmie</p>
        }
        else
        {
            <p class="company-info-text" style="font-size: 24px;">Nazwa: @companyName</p>
            <br>
            @foreach (var dayInfo in GetWorkingHoursWithPositions())
            {
                <p class="company-info-text" style="font-size: 24px;">Dzie≈Ñ: @dayInfo.Day</p>
                <p class="company-info-text">
                    <Icon Name="IconName.Clock" /> @dayInfo.WorkingHours
                </p>
                @foreach (var position in dayInfo.Positions)
                {
                    <p class="company-info-text">
                        <Icon Name="IconName.Person" /> @position
                    </p>
                }
            }
        }
    </div>

    <div class="company-info-buttons">
        <button class="company-info-button" @onclick="EditInformation">Edytuj informacje</button>
    </div>



</div>

@code {
    Company companyInstance = new Company();
    private string? companyName { get; set; }
    private Dictionary<string, Dictionary<string, string>> workingHoursDay = new();
    private Dictionary<string, List<string>> positionsPerDay = new();

    protected override void OnInitialized()
    {
        companyInstance = appState.CompanyInstance;
        companyName = companyInstance.name;
        workingHoursDay = companyInstance.workingHoursDay;
        positionsPerDay = companyInstance.positionsPerDay;
    }

    private void EditInformation()
    {
        NavigationManager.NavigateTo("/company-information-edit");
    }

    private bool IsNotNullCompanyInfo()
    {
        return companyName != null && workingHoursDay != null && positionsPerDay != null;
    }

    private List<DayInfo> GetWorkingHoursWithPositions()
    {
        List<DayInfo> dayInfoList = new List<DayInfo>();

        foreach (var workingHoursEntry in workingHoursDay)
        {
            string day = workingHoursEntry.Key;
            string workingHours = $"{workingHoursEntry.Value.First().Key} - {workingHoursEntry.Value.First().Value}";
            List<string> positions = positionsPerDay[day];

            dayInfoList.Add(new DayInfo
            {
                Day = day,
                WorkingHours = workingHours,
                Positions = positions
            });
        }

        return dayInfoList;
    }
}