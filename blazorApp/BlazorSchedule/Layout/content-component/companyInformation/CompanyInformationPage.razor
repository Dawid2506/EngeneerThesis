@page "/company-information"
@using BlazorBootstrap
@using YourBlazorProject.Models
@inject NavigationManager NavigationManager
@inject AppState appState

<div>
    <div class="h-screen w-[350px] bg-[#551811] flex flex-col fixed pt-4 overflow-y-auto">
        @if (!IsNotNullCompanyInfo())
        {
            <p class="text-2xl px-4">No company information available</p>
        }
        else
        {
            <p class="text-2xl px-4">Name: @companyName</p>
            <br>
            @foreach (DayInfo dayInfo in GetWorkingHoursWithPositions())
            {
                <p class="text-2xl px-4">Day: @dayInfo.Day</p>
                <p class="px-4">
                    <Icon Name="IconName.Clock" /> @dayInfo.WorkingHours
                </p>
                @foreach (string position in dayInfo.Positions)
                {
                    <p class="px-4">
                        <Icon Name="IconName.Person" /> @position
                    </p>
                }
            }
        }
    </div>

    <div class="ml-[400px]">
        <button class="mt-4 text-white w-[10em] h-[4em] bg-[#661D15] border-none shadow-md hover:bg-[#551811] active:scale-95" @onclick="EditInformation">Edit information</button>
    </div>
</div>

@code {
    private Company companyInstance = new Company();
    private string? companyName { get; set; }
    private Dictionary<string, Dictionary<string, string>> workingHoursDay = new();
    private Dictionary<string, List<string>> positionsPerDay = new();

    protected override void OnInitialized()
    {
        companyInstance = appState.CompanyInstance;
        companyName = companyInstance.name;
        workingHoursDay = companyInstance.workingHoursDay;
        positionsPerDay = companyInstance.positionsPerDay;
    }

    private void EditInformation()
    {
        NavigationManager.NavigateTo("/company-information-edit");
    }

    private bool IsNotNullCompanyInfo()
    {
        return !string.IsNullOrEmpty(companyName) && workingHoursDay != null && positionsPerDay != null;
    }

    private List<DayInfo> GetWorkingHoursWithPositions()
    {
        List<DayInfo> dayInfoList = new List<DayInfo>();

        foreach (KeyValuePair<string, Dictionary<string, string>> workingHoursEntry in workingHoursDay)
        {
            string day = workingHoursEntry.Key;
            string workingHours = $"{workingHoursEntry.Value.First().Key} - {workingHoursEntry.Value.First().Value}";
            List<string> positions = positionsPerDay.ContainsKey(day) ? positionsPerDay[day] : new List<string>();

            dayInfoList.Add(new DayInfo
            {
                Day = day,
                WorkingHours = workingHours,
                Positions = positions
            });
        }

        return dayInfoList;
    }
}