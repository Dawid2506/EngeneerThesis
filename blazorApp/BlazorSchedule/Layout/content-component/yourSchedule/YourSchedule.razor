@page "/your-schedule"
@inject AppState appState;
@using Blazorise.Extensions;
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory _httpClientFactory;
@using Reusable;
@inject AppState appState;
@using Reusable;

@if (errorMessage != null)
{
    <div class="bg-[#661D15] text-red-500 text-2xl w-[1000px] h-[100px] flex items-center justify-center ml-8 mt-8">
        <p>@errorMessage</p>
    </div>
}
<div class="flex p-8 justify-start items-center">
    <p class="text-xl">Month</p>
    <select data-test-id="choose-month" id="type-of-agreement" class="ml-4 rounded-lg text-black" @bind="month">
        @for (int i = 1; i <= 12; i++)
        {
            <option value="@i">@i</option>
        }
    </select>
</div>

<div class="flex p-8 justify-start items-center">
    <p class="text-xl">Year</p>
    <select data-test-id="choose-year" id="type-of-agreement" class="ml-4 rounded-lg text-black" @bind="year">
        @for (int i = 2020; i <= 2050; i++)
        {
            <option value="@i">@i</option>
        }
    </select>
</div>

<div class="flex p-8 justify-start items-center">
    <p class="text-xl">Holidays</p>
    <input type="text" class="ml-4 rounded-lg text-black" @bind="holiday" @onkeydown="(e) => OnEnterKeyPress(e, holiday)" @oninput="(e) => holiday = int.TryParse(e.Value?.ToString(), out var result) ? result : holiday" >
    <div class="ml-4 flex justify-center items-center text-white w-20 h-8 bg-[#661D15] border-none shadow-md hover:bg-[#551811] active:scale-95" @onclick='() => AddHoliday(holiday)'>Add</div>
    <div>
        <RemoveFromList Items="appState.CompanyInstance.holidays" />
    </div>
</div>

<Modal @ref="modal" title="Adjust symbols" Class="text-black">
    <BodyTemplate>
        <div>
            <p>Set holiday symbol</p>
            <input type="text" @bind="appState.scheduleSymbols.holidaySymbol" class="border rounded p-1" />

            <p class="mt-4">Set not scheduled symbol</p>
            <input type="text" @bind="appState.scheduleSymbols.notScheduledSymbol" class="border rounded p-1" />

            <p class="mt-4">Set day off symbol</p>
            <input type="text" @bind="appState.scheduleSymbols.dayOffSymbol" class="border rounded p-1" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <div class="ml-4 flex justify-center items-center text-white w-20 h-8 bg-[#661D15] border-none shadow-md hover:bg-[#551811] active:scale-95" @onclick="OnHideModalClick">Close</div>
        <div class="ml-4 flex justify-center items-center text-white w-20 h-8 bg-[#661D15] border-none shadow-md hover:bg-[#551811] active:scale-95" @onclick="OnHideModalClick">Save</div>
        <div class="ml-4 flex justify-center items-center text-white w-20 h-8 bg-[#661D15] border-none shadow-md hover:bg-[#551811] active:scale-95" @onclick="ResetSymbols">Reset</div>
    </FooterTemplate>
</Modal>

<div class="flex flex-row">
    <div class="ml-4 mt-4 flex justify-center items-center common-button" @onclick="MakeSchedule" data-test-id="show-schedule-button">Show schedule</div>
    <div class="ml-4 mt-4 flex justify-center items-center common-button" @onclick="OnShowModalClick">Adjust symbols</div>
    <div class="ml-4 mt-4 flex justify-center items-center common-button" @onclick="GenerateExcel">Download excel file</div>
</div>

<div class="flex flex-row">
    @if (scheduleIsVisible)
    {
        <div class="m-4">
            <table class="border-collapse border border-black">
                <tr>
                    <th class="text-center border border-black"></th>
                    <th class="text-center border border-black">@month.@year</th>
                    @foreach (var employee in appState.EmployeesRepository.employees)
                    {
                        <th class="text-center border border-black">@employee.name</th>
                    }
                    <th class="text-center border border-black">Missing</th>
                </tr>

                @for (int i = 0; i < NumOfDays; i++)
                {
                    int day = i + 1;
                    string rowStyle = daysToColor.Contains(day) ? "background-color: red;" : "";
                    <tr style="@rowStyle">
                        <th class="text-center border border-black">@day</th>
                        @for (int j = 0; j < appState.EmployeesRepository.employees.Count + 1; j++)
                        {
                            <td class="text-center border border-black">@appState.schedule.schedule[i, j + 1]</td>
                        }
                        <td class="text-center border border-black">@GetListAsString(i + 1, appState.schedule.brokenDaysPositions)</td>
                    </tr>
                }
            </table>
        </div>
    }

    <div class="pl-8">
        @foreach (var employee in appState.EmployeesRepository.employees)
        {
            string stylee = employee.realHoursUsed() < employee.minHours ? "background-color: red;" : "";
            <p>@employee.name</p>
            <div style=@stylee>
                <p>@employee.realHoursUsed() / @employee.minHours</p>
            </div>
        }
    </div>
</div>