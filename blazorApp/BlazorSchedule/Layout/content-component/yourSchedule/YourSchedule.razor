@page "/your-schedule"
@inject AppState appState;
@using Blazorise.Extensions;

@if (errorMessage != null)
{
    <div class="bg-[#661D15] text-red-500 text-2xl w-[1000px] h-[100px] flex items-center justify-center ml-8 mt-8">
        <p>@errorMessage</p>
    </div>
}
<div class="flex p-8 justify-start items-center">
    <p class="text-xl">Month</p>
    <select id="type-of-agreement" class="ml-4 rounded-lg text-black" @bind="month">
        @for (int i = 1; i <= 12; i++)
        {
            <option value="@i">@i</option>
        }
    </select>
</div>

<div class="flex p-8 justify-start items-center">
    <p class="text-xl">Year</p>
    <select id="type-of-agreement" class="ml-4 rounded-lg text-black" @bind="year">
        @for (int i = 2020; i <= 2050; i++)
        {
            <option value="@i">@i</option>
        }
    </select>
</div>

<div class="flex p-8 justify-start items-center">
    <p class="text-xl">Holidays</p>
    <input type="text" class="ml-4 rounded-lg text-black" @bind="holiday">
    <div class="ml-4 flex justify-center items-center text-white w-20 h-8 bg-[#661D15] border-none shadow-md hover:bg-[#551811] active:scale-95" @onclick='() => AddHoliday(holiday)'>Add</div>
    @if (holidays != null)
    {
        @for (int i = 0; i < holidays.Count; i++)
        {
            <div>
                @if (i == 0)
                {
                    <p class="text-lg">&nbsp;&nbsp;@holidays[i]</p>
                    //&nbsp; - non-breaking space
                }
                else if (i > 0)
                {
                    <p class="text-lg">, @holidays[i]</p>
                }
            </div>
        }
    }
</div>

<div class="flex flex-row">
    <div class="ml-4 mt-4 flex justify-center items-center common-button" @onclick="MakeScheduleGenerator">Show Schedule</div>
</div>

<div class="flex flex-row">
    @if (scheduleIsVisible)
    {
        <div class="m-4">
            <table class="border-collapse border border-black">
                <tr>
                    <th class="text-center border border-black"></th>
                    <th class="text-center border border-black">@month.@year</th>
                    @foreach (var employee in appState.EmployeesRepository.employees)
                    {
                        <th class="text-center border border-black">@employee.name</th>
                    }
                    <th class="text-center border border-black">Missing</th>
                </tr>

                @for (int i = 0; i < NumOfDays; i++)
                {
                    int day = i + 1;
                    string rowStyle = daysToColor.Contains(day) ? "background-color: red;" : "";
                    <tr style="@rowStyle">
                        <th class="text-center border border-black">@day</th>
                        @for (int j = 0; j < appState.EmployeesRepository.employees.Count + 1; j++)
                        {
                            <td class="text-center border border-black">@appState.schedule.schedule[i, j + 1]</td>
                        }
                        <td class="text-center border border-black">@GetListAsString(i + 1, appState.schedule.brokenDaysPositions)</td>
                    </tr>
                }
            </table>
        </div>
    }

    <div class="pl-8">
        @foreach (var employee in appState.EmployeesRepository.employees)
        {
            string stylee = employee.realHoursUsed() < employee.minHours ? "background-color: red;" : "";
            <p>@employee.name</p>
            <div style=@stylee>
                <p>@employee.realHoursUsed() / @employee.minHours</p>
            </div>
        }
    </div>
</div>

@code {
    private int holiday;
    private List<int> holidays;
    private string errorMessage;
    private int month;
    private int year;
    private Dictionary<string, int> workingDaysToInt;
    private bool scheduleIsVisible = false;
    private int NumOfDays;
    private List<int> daysToColor;

    protected override void OnInitialized()
    {
        holidays = new List<int>();
    }

    private void AddHoliday(int holiday)
    {
        if (holiday > 0 && holiday < 32)
        {
            holidays.Add(holiday);
            holiday = 0;
        }
    }

    private void MakeScheduleGenerator()
    {
        DateTime date = new DateTime(year, month, 1);
        int NumOfDaysInApril = DateTime.DaysInMonth(date.Year, date.Month);
        List<Employee> employees = appState.EmployeesRepository.employees;

        int tryCount = 0;
        int maxTryCount = 2; //number of tries
        int minBrokenDays = 0;
        string[,] bestSchedule = new string[NumOfDaysInApril, employees.Count + 2];
        while (tryCount < maxTryCount)
        {
            tryCount++;
            MakeSchedule(NumOfDaysInApril, employees);
            if (minBrokenDays < appState.schedule.brokenDays.Count())
            {
                minBrokenDays = appState.schedule.brokenDays.Count();
                bestSchedule = appState.schedule.schedule;
            }
        }
        appState.schedule.schedule = bestSchedule;
    }
    private void MakeSchedule(int NumOfDaysInApril, List<Employee> employees)
    {
        if (month == 0 || year == 0)
        {
            errorMessage = "Provide month and year";
            return;
        }
        else
        {
            errorMessage = null;
        }

        DateTime date = new DateTime(year, month, 1);
        DateTime firstDayOfApril = new DateTime(date.Year, date.Month, 1);
        DayOfWeek startDayOfWeek = firstDayOfApril.DayOfWeek;
        int FirstDayOfMonth = (int)startDayOfWeek;

        List<int> workingDaysInt = MakeNumberOfDaysDictionary();
        Company company = appState.CompanyInstance;

        foreach (var employee in employees)
        {
            foreach (var day in holidays)
            {
                employee.daysOff.Add(day);
            }
        }

        appState.schedule.InitializeSchedule(NumOfDaysInApril, workingDaysInt, FirstDayOfMonth, employees, company);

        appState.schedule.month = month.ToString();
        appState.schedule.year = year.ToString();

        scheduleIsVisible = true;
        NumOfDays = NumOfDaysInApril;

        daysToColor = appState.schedule.brokenDays;
    }

    private string GetListAsString(int key, Dictionary<int, List<string>> brokenDaysPositions)
    {
        if (brokenDaysPositions.TryGetValue(key, out var list))
        {
            return string.Join(", ", list);
        }
        return string.Empty;
    }

    private List<int> MakeNumberOfDaysDictionary()
    {
        List<int> workingDaysInt = new List<int>();

        workingDaysToInt = new Dictionary<string, int>();
        workingDaysToInt.Add("Sunday", 0);
        workingDaysToInt.Add("Monday", 1);
        workingDaysToInt.Add("Tuesday", 2);
        workingDaysToInt.Add("Wednesday", 3);
        workingDaysToInt.Add("Thursday", 4);
        workingDaysToInt.Add("Friday", 5);
        workingDaysToInt.Add("Saturday", 6);

        foreach (var day in appState.CompanyInstance.workingDays)
        {
            workingDaysInt.Add(workingDaysToInt[day]);
        }

        return workingDaysInt;
    }
}