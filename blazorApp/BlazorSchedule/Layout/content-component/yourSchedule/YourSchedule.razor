@page "/your-schedule"
@inject AppState appState;

@if (errorMessage != null)
{
    <div class="error-message">
        <p>@errorMessage</p>
    </div>
}
<div class="particular-information">
    <p class="add-employee-text">Miesiąc</p>
    <select id="type-of-agreement" class="add-employee-textbox" @bind="month">
        @for (int i = 1; i <= 12; i++)
        {
            <option value="@i">@i</option>
        }
    </select>
</div>

<div class="particular-information">
    <p class="add-employee-text">Rok</p>
    <select id="type-of-agreement" class="add-employee-textbox" @bind="year">
        @for (int i = 2020; i <= 2050; i++)
        {
            <option value="@i">@i</option>
        }
    </select>
</div>

<div class="show-schedule-button" @onclick="MakeSchedule">Pokaż grafik</div>

@if (scheduleIsVisible)
{
    <div class="schedule">
        <table>
            <tr>
                <th>Imię</th>
                @for (int i = 1; i <= 30; i++)
                {
                    <th>@i</th>
                }
            </tr>
            @foreach (var employee in appState.EmployeesRepository.employees)
            {
                <tr>
                    <td>@employee.name</td>
                    @foreach (var day in appState.schedule.schedule)
                    {
                        <td>@day</td>
                    }
                </tr>
            }
        </table>
    </div>
}

@if (scheduleIsVisible)
{
    <div class="schedule">
        <table>
            <tr>
                <th>imie</th>
                @foreach (var employee in appState.EmployeesRepository.employees)
                {
                    <th>@employee.name</th>
                }
            </tr>

            @for (int i = 0; i < 29; i++)
            {
                int day = i + 1;
                <tr>
                    <th>@day</th>
                    @foreach (var employee in appState.EmployeesRepository.employees)
                    {
                        int numOfEmployee = appState.EmployeesRepository.employees.IndexOf(employee);
                        <td>@appState.schedule.schedule[22, 1]</td>
                        //Console.WriteLine(i + "," + numOfEmployee + "="+appState.schedule.schedule[i, numOfEmployee]);
                    }
                </tr>
            }
        </table>
    </div>
}

@code {
    private string errorMessage;
    private int month;
    private int year;
    private Dictionary<string, int> workingDaysToInt;
    private bool scheduleIsVisible = false;
    private void MakeSchedule()
    {
        if (month == 0 || year == 0)
        {
            errorMessage = "Podaj miesiąc oraz rok";
            return;
        }
        else
        {
            errorMessage = null;
        }

        Console.WriteLine("month");
        Console.WriteLine(month);

        DateTime date = new DateTime(year, month, 1);
        int NumOfDaysInApril = DateTime.DaysInMonth(date.Year, date.Month);
        DateTime firstDayOfApril = new DateTime(date.Year, date.Month, 1);
        DayOfWeek startDayOfWeek = firstDayOfApril.DayOfWeek;
        int FirstDayOfMonth = (int)startDayOfWeek;

        //Console.WriteLine($"Kwiecień 2024 roku rozpoczyna się od dnia tygodnia: {startDayOfWeek}.");
        Console.WriteLine($"Kwiecień 2024 roku rozpoczyna się od dnia tygodnia: {FirstDayOfMonth}.");

        List<int> workingDaysInt = MakeNumberOfDaysDictionary();
        List<Employee> employees = appState.EmployeesRepository.employees;

        Console.WriteLine("------------------sss");
        foreach (var day in workingDaysInt)
        {
            Console.WriteLine(day);
        }

        appState.schedule.InitializeSchedule(NumOfDaysInApril, workingDaysInt, FirstDayOfMonth, employees);

        Console.WriteLine("printing");
        appState.schedule.PrintAllSchedule();

        scheduleIsVisible = true;
    }

    private List<int> MakeNumberOfDaysDictionary()
    {
        List<int> workingDaysInt = new List<int>();

        workingDaysToInt = new Dictionary<string, int>();
        workingDaysToInt.Add("niedziela", 0);
        workingDaysToInt.Add("poniedziałek", 1);
        workingDaysToInt.Add("wtorek", 2);
        workingDaysToInt.Add("środa", 3);
        workingDaysToInt.Add("czwartek", 4);
        workingDaysToInt.Add("piątek", 5);
        workingDaysToInt.Add("sobota", 6);

        foreach (var day in appState.CompanyInstance.workingDays)
        {
            workingDaysInt.Add(workingDaysToInt[day]);
        }

        return workingDaysInt;
    }
}